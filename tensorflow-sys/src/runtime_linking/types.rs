/* automatically generated by rust-bindgen 0.60.1 */

#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TF_AttrType {
    TF_ATTR_STRING = 0,
    TF_ATTR_INT = 1,
    TF_ATTR_FLOAT = 2,
    TF_ATTR_BOOL = 3,
    TF_ATTR_TYPE = 4,
    TF_ATTR_SHAPE = 5,
    TF_ATTR_TENSOR = 6,
    TF_ATTR_PLACEHOLDER = 7,
    TF_ATTR_FUNC = 8,
}
impl TF_DataType {
    pub const TF_COMPLEX: TF_DataType = TF_DataType::TF_COMPLEX64;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TF_DataType {
    TF_FLOAT = 1,
    TF_DOUBLE = 2,
    TF_INT32 = 3,
    TF_UINT8 = 4,
    TF_INT16 = 5,
    TF_INT8 = 6,
    TF_STRING = 7,
    TF_COMPLEX64 = 8,
    TF_INT64 = 9,
    TF_BOOL = 10,
    TF_QINT8 = 11,
    TF_QUINT8 = 12,
    TF_QINT32 = 13,
    TF_BFLOAT16 = 14,
    TF_QINT16 = 15,
    TF_QUINT16 = 16,
    TF_UINT16 = 17,
    TF_COMPLEX128 = 18,
    TF_HALF = 19,
    TF_RESOURCE = 20,
    TF_VARIANT = 21,
    TF_UINT32 = 22,
    TF_UINT64 = 23,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TF_Status {
    _unused: [u8; 0],
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TF_Code {
    TF_OK = 0,
    TF_CANCELLED = 1,
    TF_UNKNOWN = 2,
    TF_INVALID_ARGUMENT = 3,
    TF_DEADLINE_EXCEEDED = 4,
    TF_NOT_FOUND = 5,
    TF_ALREADY_EXISTS = 6,
    TF_PERMISSION_DENIED = 7,
    TF_UNAUTHENTICATED = 16,
    TF_RESOURCE_EXHAUSTED = 8,
    TF_FAILED_PRECONDITION = 9,
    TF_ABORTED = 10,
    TF_OUT_OF_RANGE = 11,
    TF_UNIMPLEMENTED = 12,
    TF_INTERNAL = 13,
    TF_UNAVAILABLE = 14,
    TF_DATA_LOSS = 15,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TF_AllocatorAttributes {
    pub struct_size: usize,
    pub on_host: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_TF_AllocatorAttributes() {
    assert_eq!(
        ::std::mem::size_of::<TF_AllocatorAttributes>(),
        16usize,
        concat!("Size of: ", stringify!(TF_AllocatorAttributes))
    );
    assert_eq!(
        ::std::mem::align_of::<TF_AllocatorAttributes>(),
        8usize,
        concat!("Alignment of ", stringify!(TF_AllocatorAttributes))
    );
    fn test_field_struct_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_AllocatorAttributes>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).struct_size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_AllocatorAttributes),
                "::",
                stringify!(struct_size)
            )
        );
    }
    test_field_struct_size();
    fn test_field_on_host() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_AllocatorAttributes>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).on_host) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_AllocatorAttributes),
                "::",
                stringify!(on_host)
            )
        );
    }
    test_field_on_host();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TF_Tensor {
    _unused: [u8; 0],
}
impl TF_TString_Type {
    pub const TF_TSTR_TYPE_MASK: TF_TString_Type = TF_TString_Type::TF_TSTR_VIEW;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum TF_TString_Type {
    TF_TSTR_SMALL = 0,
    TF_TSTR_LARGE = 1,
    TF_TSTR_OFFSET = 2,
    TF_TSTR_VIEW = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TF_TString_Large {
    pub size: usize,
    pub cap: usize,
    pub ptr: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_TF_TString_Large() {
    assert_eq!(
        ::std::mem::size_of::<TF_TString_Large>(),
        24usize,
        concat!("Size of: ", stringify!(TF_TString_Large))
    );
    assert_eq!(
        ::std::mem::align_of::<TF_TString_Large>(),
        8usize,
        concat!("Alignment of ", stringify!(TF_TString_Large))
    );
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_TString_Large>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_TString_Large),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_cap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_TString_Large>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cap) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_TString_Large),
                "::",
                stringify!(cap)
            )
        );
    }
    test_field_cap();
    fn test_field_ptr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_TString_Large>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_TString_Large),
                "::",
                stringify!(ptr)
            )
        );
    }
    test_field_ptr();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TF_TString_Offset {
    pub size: u32,
    pub offset: u32,
    pub count: u32,
}
#[test]
fn bindgen_test_layout_TF_TString_Offset() {
    assert_eq!(
        ::std::mem::size_of::<TF_TString_Offset>(),
        12usize,
        concat!("Size of: ", stringify!(TF_TString_Offset))
    );
    assert_eq!(
        ::std::mem::align_of::<TF_TString_Offset>(),
        4usize,
        concat!("Alignment of ", stringify!(TF_TString_Offset))
    );
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_TString_Offset>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_TString_Offset),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_TString_Offset>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_TString_Offset),
                "::",
                stringify!(offset)
            )
        );
    }
    test_field_offset();
    fn test_field_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_TString_Offset>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_TString_Offset),
                "::",
                stringify!(count)
            )
        );
    }
    test_field_count();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TF_TString_View {
    pub size: usize,
    pub ptr: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_TF_TString_View() {
    assert_eq!(
        ::std::mem::size_of::<TF_TString_View>(),
        16usize,
        concat!("Size of: ", stringify!(TF_TString_View))
    );
    assert_eq!(
        ::std::mem::align_of::<TF_TString_View>(),
        8usize,
        concat!("Alignment of ", stringify!(TF_TString_View))
    );
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_TString_View>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_TString_View),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_ptr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_TString_View>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_TString_View),
                "::",
                stringify!(ptr)
            )
        );
    }
    test_field_ptr();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TF_TString_Raw {
    pub raw: [u8; 24usize],
}
#[test]
fn bindgen_test_layout_TF_TString_Raw() {
    assert_eq!(
        ::std::mem::size_of::<TF_TString_Raw>(),
        24usize,
        concat!("Size of: ", stringify!(TF_TString_Raw))
    );
    assert_eq!(
        ::std::mem::align_of::<TF_TString_Raw>(),
        1usize,
        concat!("Alignment of ", stringify!(TF_TString_Raw))
    );
    fn test_field_raw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_TString_Raw>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).raw) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_TString_Raw),
                "::",
                stringify!(raw)
            )
        );
    }
    test_field_raw();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TF_TString_Union {
    pub large: TF_TString_Large,
    pub offset: TF_TString_Offset,
    pub view: TF_TString_View,
    pub raw: TF_TString_Raw,
}
#[test]
fn bindgen_test_layout_TF_TString_Union() {
    assert_eq!(
        ::std::mem::size_of::<TF_TString_Union>(),
        24usize,
        concat!("Size of: ", stringify!(TF_TString_Union))
    );
    assert_eq!(
        ::std::mem::align_of::<TF_TString_Union>(),
        8usize,
        concat!("Alignment of ", stringify!(TF_TString_Union))
    );
    fn test_field_large() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_TString_Union>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).large) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_TString_Union),
                "::",
                stringify!(large)
            )
        );
    }
    test_field_large();
    fn test_field_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_TString_Union>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_TString_Union),
                "::",
                stringify!(offset)
            )
        );
    }
    test_field_offset();
    fn test_field_view() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_TString_Union>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).view) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_TString_Union),
                "::",
                stringify!(view)
            )
        );
    }
    test_field_view();
    fn test_field_raw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_TString_Union>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).raw) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_TString_Union),
                "::",
                stringify!(raw)
            )
        );
    }
    test_field_raw();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TF_TString_Small {
    pub size: u8,
    pub str_: [::std::os::raw::c_char; 23usize],
}
#[test]
fn bindgen_test_layout_TF_TString_Small() {
    assert_eq!(
        ::std::mem::size_of::<TF_TString_Small>(),
        24usize,
        concat!("Size of: ", stringify!(TF_TString_Small))
    );
    assert_eq!(
        ::std::mem::align_of::<TF_TString_Small>(),
        1usize,
        concat!("Alignment of ", stringify!(TF_TString_Small))
    );
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_TString_Small>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_TString_Small),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_str() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_TString_Small>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).str_) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_TString_Small),
                "::",
                stringify!(str_)
            )
        );
    }
    test_field_str();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TF_TString {
    pub u: TF_TString__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TF_TString__bindgen_ty_1 {
    pub smll: TF_TString_Small,
    pub large: TF_TString_Large,
    pub offset: TF_TString_Offset,
    pub view: TF_TString_View,
    pub raw: TF_TString_Raw,
}
#[test]
fn bindgen_test_layout_TF_TString__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<TF_TString__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(TF_TString__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<TF_TString__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(TF_TString__bindgen_ty_1))
    );
    fn test_field_smll() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_TString__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).smll) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_TString__bindgen_ty_1),
                "::",
                stringify!(smll)
            )
        );
    }
    test_field_smll();
    fn test_field_large() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_TString__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).large) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_TString__bindgen_ty_1),
                "::",
                stringify!(large)
            )
        );
    }
    test_field_large();
    fn test_field_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_TString__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_TString__bindgen_ty_1),
                "::",
                stringify!(offset)
            )
        );
    }
    test_field_offset();
    fn test_field_view() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_TString__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).view) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_TString__bindgen_ty_1),
                "::",
                stringify!(view)
            )
        );
    }
    test_field_view();
    fn test_field_raw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_TString__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).raw) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_TString__bindgen_ty_1),
                "::",
                stringify!(raw)
            )
        );
    }
    test_field_raw();
}
#[test]
fn bindgen_test_layout_TF_TString() {
    assert_eq!(
        ::std::mem::size_of::<TF_TString>(),
        24usize,
        concat!("Size of: ", stringify!(TF_TString))
    );
    assert_eq!(
        ::std::mem::align_of::<TF_TString>(),
        8usize,
        concat!("Alignment of ", stringify!(TF_TString))
    );
    fn test_field_u() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_TString>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_TString),
                "::",
                stringify!(u)
            )
        );
    }
    test_field_u();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TF_Buffer {
    pub data: *const ::std::os::raw::c_void,
    pub length: usize,
    pub data_deallocator: ::std::option::Option<
        unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, length: usize),
    >,
}
#[test]
fn bindgen_test_layout_TF_Buffer() {
    assert_eq!(
        ::std::mem::size_of::<TF_Buffer>(),
        24usize,
        concat!("Size of: ", stringify!(TF_Buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<TF_Buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(TF_Buffer))
    );
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_Buffer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_Buffer),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
    fn test_field_length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_Buffer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_Buffer),
                "::",
                stringify!(length)
            )
        );
    }
    test_field_length();
    fn test_field_data_deallocator() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_Buffer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data_deallocator) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_Buffer),
                "::",
                stringify!(data_deallocator)
            )
        );
    }
    test_field_data_deallocator();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TF_StringView {
    pub data: *const ::std::os::raw::c_char,
    pub len: usize,
}
#[test]
fn bindgen_test_layout_TF_StringView() {
    assert_eq!(
        ::std::mem::size_of::<TF_StringView>(),
        16usize,
        concat!("Size of: ", stringify!(TF_StringView))
    );
    assert_eq!(
        ::std::mem::align_of::<TF_StringView>(),
        8usize,
        concat!("Alignment of ", stringify!(TF_StringView))
    );
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_StringView>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_StringView),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
    fn test_field_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_StringView>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_StringView),
                "::",
                stringify!(len)
            )
        );
    }
    test_field_len();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TF_SessionOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TF_Graph {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TF_OperationDescription {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TF_Operation {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TF_Input {
    pub oper: *mut TF_Operation,
    pub index: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TF_Input() {
    assert_eq!(
        ::std::mem::size_of::<TF_Input>(),
        16usize,
        concat!("Size of: ", stringify!(TF_Input))
    );
    assert_eq!(
        ::std::mem::align_of::<TF_Input>(),
        8usize,
        concat!("Alignment of ", stringify!(TF_Input))
    );
    fn test_field_oper() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_Input>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).oper) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_Input),
                "::",
                stringify!(oper)
            )
        );
    }
    test_field_oper();
    fn test_field_index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_Input>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_Input),
                "::",
                stringify!(index)
            )
        );
    }
    test_field_index();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TF_Output {
    pub oper: *mut TF_Operation,
    pub index: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TF_Output() {
    assert_eq!(
        ::std::mem::size_of::<TF_Output>(),
        16usize,
        concat!("Size of: ", stringify!(TF_Output))
    );
    assert_eq!(
        ::std::mem::align_of::<TF_Output>(),
        8usize,
        concat!("Alignment of ", stringify!(TF_Output))
    );
    fn test_field_oper() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_Output>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).oper) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_Output),
                "::",
                stringify!(oper)
            )
        );
    }
    test_field_oper();
    fn test_field_index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_Output>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_Output),
                "::",
                stringify!(index)
            )
        );
    }
    test_field_index();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TF_Function {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TF_FunctionOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TF_AttrMetadata {
    pub is_list: ::std::os::raw::c_uchar,
    pub list_size: i64,
    pub type_: TF_AttrType,
    pub total_size: i64,
}
#[test]
fn bindgen_test_layout_TF_AttrMetadata() {
    assert_eq!(
        ::std::mem::size_of::<TF_AttrMetadata>(),
        32usize,
        concat!("Size of: ", stringify!(TF_AttrMetadata))
    );
    assert_eq!(
        ::std::mem::align_of::<TF_AttrMetadata>(),
        8usize,
        concat!("Alignment of ", stringify!(TF_AttrMetadata))
    );
    fn test_field_is_list() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_AttrMetadata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).is_list) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_AttrMetadata),
                "::",
                stringify!(is_list)
            )
        );
    }
    test_field_is_list();
    fn test_field_list_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_AttrMetadata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).list_size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_AttrMetadata),
                "::",
                stringify!(list_size)
            )
        );
    }
    test_field_list_size();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_AttrMetadata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_AttrMetadata),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_total_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_AttrMetadata>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).total_size) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_AttrMetadata),
                "::",
                stringify!(total_size)
            )
        );
    }
    test_field_total_size();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TF_ImportGraphDefOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TF_ImportGraphDefResults {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TF_WhileParams {
    pub ninputs: ::std::os::raw::c_int,
    pub cond_graph: *mut TF_Graph,
    pub cond_inputs: *const TF_Output,
    pub cond_output: TF_Output,
    pub body_graph: *mut TF_Graph,
    pub body_inputs: *const TF_Output,
    pub body_outputs: *mut TF_Output,
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_TF_WhileParams() {
    assert_eq!(
        ::std::mem::size_of::<TF_WhileParams>(),
        72usize,
        concat!("Size of: ", stringify!(TF_WhileParams))
    );
    assert_eq!(
        ::std::mem::align_of::<TF_WhileParams>(),
        8usize,
        concat!("Alignment of ", stringify!(TF_WhileParams))
    );
    fn test_field_ninputs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_WhileParams>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ninputs) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_WhileParams),
                "::",
                stringify!(ninputs)
            )
        );
    }
    test_field_ninputs();
    fn test_field_cond_graph() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_WhileParams>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cond_graph) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_WhileParams),
                "::",
                stringify!(cond_graph)
            )
        );
    }
    test_field_cond_graph();
    fn test_field_cond_inputs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_WhileParams>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cond_inputs) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_WhileParams),
                "::",
                stringify!(cond_inputs)
            )
        );
    }
    test_field_cond_inputs();
    fn test_field_cond_output() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_WhileParams>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cond_output) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_WhileParams),
                "::",
                stringify!(cond_output)
            )
        );
    }
    test_field_cond_output();
    fn test_field_body_graph() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_WhileParams>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).body_graph) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_WhileParams),
                "::",
                stringify!(body_graph)
            )
        );
    }
    test_field_body_graph();
    fn test_field_body_inputs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_WhileParams>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).body_inputs) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_WhileParams),
                "::",
                stringify!(body_inputs)
            )
        );
    }
    test_field_body_inputs();
    fn test_field_body_outputs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_WhileParams>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).body_outputs) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_WhileParams),
                "::",
                stringify!(body_outputs)
            )
        );
    }
    test_field_body_outputs();
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TF_WhileParams>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(TF_WhileParams),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TF_Session {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TF_DeprecatedSession {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TF_DeviceList {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TF_Library {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TF_ApiDefMap {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TF_Server {
    _unused: [u8; 0],
}
