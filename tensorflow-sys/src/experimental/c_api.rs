/* automatically generated by rust-bindgen 0.61.0 */

#[repr(C)]
#[derive(Debug)]
pub struct TF_CheckpointReader {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug)]
pub struct TF_AttrBuilder {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct TF_ShapeAndType {
    pub num_dims: ::std::os::raw::c_int,
    pub dims: *mut i64,
    pub dtype: TF_DataType,
}
#[test]
fn bindgen_test_layout_TF_ShapeAndType() {
    const UNINIT: ::std::mem::MaybeUninit<TF_ShapeAndType> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TF_ShapeAndType>(),
        24usize,
        concat!("Size of: ", stringify!(TF_ShapeAndType))
    );
    assert_eq!(
        ::std::mem::align_of::<TF_ShapeAndType>(),
        8usize,
        concat!("Alignment of ", stringify!(TF_ShapeAndType))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_dims) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TF_ShapeAndType),
            "::",
            stringify!(num_dims)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dims) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TF_ShapeAndType),
            "::",
            stringify!(dims)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dtype) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TF_ShapeAndType),
            "::",
            stringify!(dtype)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct TF_ShapeAndTypeList {
    pub num_items: ::std::os::raw::c_int,
    pub items: *mut TF_ShapeAndType,
}
#[test]
fn bindgen_test_layout_TF_ShapeAndTypeList() {
    const UNINIT: ::std::mem::MaybeUninit<TF_ShapeAndTypeList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TF_ShapeAndTypeList>(),
        16usize,
        concat!("Size of: ", stringify!(TF_ShapeAndTypeList))
    );
    assert_eq!(
        ::std::mem::align_of::<TF_ShapeAndTypeList>(),
        8usize,
        concat!("Alignment of ", stringify!(TF_ShapeAndTypeList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_items) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TF_ShapeAndTypeList),
            "::",
            stringify!(num_items)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).items) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TF_ShapeAndTypeList),
            "::",
            stringify!(items)
        )
    );
}
extern "C" {
    pub fn TF_LoadPluggableDeviceLibrary(
        library_filename: *const ::std::os::raw::c_char,
        status: *mut TF_Status,
    ) -> *mut TF_Library;
}
extern "C" {
    pub fn TF_DeletePluggableDeviceLibraryHandle(lib_handle: *mut TF_Library);
}
